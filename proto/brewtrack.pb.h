// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brewtrack.proto

#ifndef PROTOBUF_brewtrack_2eproto__INCLUDED
#define PROTOBUF_brewtrack_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "uuid.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_brewtrack_2eproto();
void protobuf_AssignDesc_brewtrack_2eproto();
void protobuf_ShutdownFile_brewtrack_2eproto();

class Brewtrack;

// ===================================================================

class Brewtrack : public ::google::protobuf::Message {
 public:
  Brewtrack();
  virtual ~Brewtrack();

  Brewtrack(const Brewtrack& from);

  inline Brewtrack& operator=(const Brewtrack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Brewtrack& default_instance();

  void Swap(Brewtrack* other);

  // implements Message ----------------------------------------------

  Brewtrack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Brewtrack& from);
  void MergeFrom(const Brewtrack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .uuid id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::uuid& id() const;
  inline ::uuid* mutable_id();
  inline ::uuid* release_id();
  inline void set_allocated_id(::uuid* id);

  // @@protoc_insertion_point(class_scope:Brewtrack)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::uuid* id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_brewtrack_2eproto();
  friend void protobuf_AssignDesc_brewtrack_2eproto();
  friend void protobuf_ShutdownFile_brewtrack_2eproto();

  void InitAsDefaultInstance();
  static Brewtrack* default_instance_;
};
// ===================================================================


// ===================================================================

// Brewtrack

// optional .uuid id = 1;
inline bool Brewtrack::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Brewtrack::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Brewtrack::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Brewtrack::clear_id() {
  if (id_ != NULL) id_->::uuid::Clear();
  clear_has_id();
}
inline const ::uuid& Brewtrack::id() const {
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::uuid* Brewtrack::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::uuid;
  return id_;
}
inline ::uuid* Brewtrack::release_id() {
  clear_has_id();
  ::uuid* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Brewtrack::set_allocated_id(::uuid* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_brewtrack_2eproto__INCLUDED
