// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uuid.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "uuid.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* uuid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  uuid_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_uuid_2eproto() {
  protobuf_AddDesc_uuid_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "uuid.proto");
  GOOGLE_CHECK(file != NULL);
  uuid_descriptor_ = file->message_type(0);
  static const int uuid_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uuid, id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uuid, id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uuid, id3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uuid, id4_),
  };
  uuid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      uuid_descriptor_,
      uuid::default_instance_,
      uuid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uuid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uuid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(uuid));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_uuid_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    uuid_descriptor_, &uuid::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_uuid_2eproto() {
  delete uuid::default_instance_;
  delete uuid_reflection_;
}

void protobuf_AddDesc_uuid_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nuuid.proto\":\n\004uuid\022\013\n\003id1\030\001 \002(\r\022\013\n\003id2"
    "\030\002 \002(\r\022\013\n\003id3\030\003 \002(\r\022\013\n\003id4\030\004 \002(\r", 72);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "uuid.proto", &protobuf_RegisterTypes);
  uuid::default_instance_ = new uuid();
  uuid::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_uuid_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_uuid_2eproto {
  StaticDescriptorInitializer_uuid_2eproto() {
    protobuf_AddDesc_uuid_2eproto();
  }
} static_descriptor_initializer_uuid_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int uuid::kId1FieldNumber;
const int uuid::kId2FieldNumber;
const int uuid::kId3FieldNumber;
const int uuid::kId4FieldNumber;
#endif  // !_MSC_VER

uuid::uuid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void uuid::InitAsDefaultInstance() {
}

uuid::uuid(const uuid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void uuid::SharedCtor() {
  _cached_size_ = 0;
  id1_ = 0u;
  id2_ = 0u;
  id3_ = 0u;
  id4_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

uuid::~uuid() {
  SharedDtor();
}

void uuid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void uuid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* uuid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return uuid_descriptor_;
}

const uuid& uuid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uuid_2eproto();
  return *default_instance_;
}

uuid* uuid::default_instance_ = NULL;

uuid* uuid::New() const {
  return new uuid;
}

void uuid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id1_ = 0u;
    id2_ = 0u;
    id3_ = 0u;
    id4_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool uuid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id1_)));
          set_has_id1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id2;
        break;
      }

      // required uint32 id2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id2_)));
          set_has_id2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id3;
        break;
      }

      // required uint32 id3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id3_)));
          set_has_id3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id4;
        break;
      }

      // required uint32 id4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id4_)));
          set_has_id4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void uuid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id1 = 1;
  if (has_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id1(), output);
  }

  // required uint32 id2 = 2;
  if (has_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id2(), output);
  }

  // required uint32 id3 = 3;
  if (has_id3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id3(), output);
  }

  // required uint32 id4 = 4;
  if (has_id4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->id4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* uuid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id1 = 1;
  if (has_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id1(), target);
  }

  // required uint32 id2 = 2;
  if (has_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id2(), target);
  }

  // required uint32 id3 = 3;
  if (has_id3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id3(), target);
  }

  // required uint32 id4 = 4;
  if (has_id4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->id4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int uuid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id1 = 1;
    if (has_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id1());
    }

    // required uint32 id2 = 2;
    if (has_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id2());
    }

    // required uint32 id3 = 3;
    if (has_id3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id3());
    }

    // required uint32 id4 = 4;
    if (has_id4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id4());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void uuid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const uuid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const uuid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void uuid::MergeFrom(const uuid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id1()) {
      set_id1(from.id1());
    }
    if (from.has_id2()) {
      set_id2(from.id2());
    }
    if (from.has_id3()) {
      set_id3(from.id3());
    }
    if (from.has_id4()) {
      set_id4(from.id4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void uuid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uuid::CopyFrom(const uuid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uuid::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void uuid::Swap(uuid* other) {
  if (other != this) {
    std::swap(id1_, other->id1_);
    std::swap(id2_, other->id2_);
    std::swap(id3_, other->id3_);
    std::swap(id4_, other->id4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata uuid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = uuid_descriptor_;
  metadata.reflection = uuid_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
